{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":11030360,"sourceType":"datasetVersion","datasetId":6869635}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true},"colab":{"provenance":[{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/time-series-forecasting-with-lstms-7b705b4b-b28b-4ad1-9002-2529cee1e69b.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20250313/auto/storage/goog4_request&X-Goog-Date=20250313T102408Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=20e829851af5e2248ad209c91d4356bf584d686c2ae33a1a0366a9fb6de2489a3cddfcb1b296505f81c8c0bdd0499834a74c026004263834c26130d37ba4b4ef2131fc300a339deb680c8033ee05f3991becec6142d4fd20f8a4b17b0a2679e8e35a267094d7669b5a4c76bcda75e5e4312c4f09a5b481ec16c26cebad6795f00331c3c5217b8c6c124c06a548c8c47cd3cf1868b164a4abc0b2f810521a1b386901f9fbfce8a9cf19ce7b16a5d6c717eb2c643af604ce84b4773d48e2ce4997848fdfa728a342d50abcf29f47995fd17fd82d21cb91f5dd37701566c7715c3671dc7006cfbbc0de56907a3c6fa0880d1ae8115cfadea08839ed074a60371bd6","timestamp":1741861729357}],"gpuType":"T4"},"accelerator":"GPU"},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/miharyrama/time-series-forecasting-with-lstm-stock-price?scriptVersionId=227580768\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"In this project we apply Long SHort-Term Memory (LSTM) networks to predict future values within a time series. We focus on stock pirce prediction.","metadata":{"id":"MnPWZ130CHPo"}},{"cell_type":"markdown","source":"# Data Collection and Preprocessing","metadata":{"id":"uu1YI94VCHQJ"}},{"cell_type":"code","source":"!pip install yahooquery","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-14T14:07:02.142475Z","iopub.execute_input":"2025-03-14T14:07:02.142827Z","iopub.status.idle":"2025-03-14T14:07:07.171839Z","shell.execute_reply.started":"2025-03-14T14:07:02.142798Z","shell.execute_reply":"2025-03-14T14:07:07.170977Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from yahooquery import Ticker\n\nticker = Ticker(\"GOOGL\")\ndata = ticker.history(start='2000-01-01', end='2025-02-28')[['close', 'high', 'low', 'open', 'volume' ]]\ndata.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-14T14:23:23.875547Z","iopub.execute_input":"2025-03-14T14:23:23.875873Z","iopub.status.idle":"2025-03-14T14:23:24.696545Z","shell.execute_reply.started":"2025-03-14T14:23:23.875849Z","shell.execute_reply":"2025-03-14T14:23:24.695802Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#(from Google Colab)\n#!pip install yfinance --upgrade ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-14T14:00:45.80516Z","iopub.execute_input":"2025-03-14T14:00:45.805461Z","iopub.status.idle":"2025-03-14T14:00:50.456945Z","shell.execute_reply.started":"2025-03-14T14:00:45.805438Z","shell.execute_reply":"2025-03-14T14:00:50.456054Z"},"id":"hGCyeXDiCHQK","executionInfo":{"status":"ok","timestamp":1741861800161,"user_tz":-60,"elapsed":3422,"user":{"displayName":"Mihary Ramanana-rahary","userId":"00864743660161252694"}},"outputId":"b64ea9b4-f52d-4159-9de0-8586f35337ea"},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\"\"\"\nFor Google Colab\n\nimport pandas as pd\nimport numpy as np\nimport yfinance as yf\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\n\n# Fetch more historical data and additional features\n#(from Google Colab)\n#stock_data = yf.download('GOOGL', start='2000-01-01', end='2025-02-28') \nstock_data = pd.read_csv('/kaggle/input/google-stock-from-2000-01-01-to-2025-02-28/google_stock_2000-01-01_2025-02-28_dataset.csv')\nstock_data['Return'] = stock_data['Close'].pct_change()\nstock_data['MA50'] = stock_data['Close'].rolling(window=50).mean()\nstock_data['MA200'] = stock_data['Close'].rolling(window=200).mean()\nstock_data['Volume_MA'] = stock_data['Volume'].rolling(window=20).mean()\nstock_data.dropna(inplace=True)\nstock_data.head()data = ticker.history(start='2000-01-01', end='2025-02-28')\ndata.head()\n\"\"\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-14T14:16:38.181568Z","iopub.execute_input":"2025-03-14T14:16:38.18193Z","iopub.status.idle":"2025-03-14T14:16:38.187266Z","shell.execute_reply.started":"2025-03-14T14:16:38.181901Z","shell.execute_reply":"2025-03-14T14:16:38.186455Z"},"id":"-bcin5FECHQZ","executionInfo":{"status":"ok","timestamp":1741861804825,"user_tz":-60,"elapsed":4648,"user":{"displayName":"Mihary Ramanana-rahary","userId":"00864743660161252694"}},"outputId":"8378dbe4-e737-48a9-bbbc-9e87f927bd77"},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport yfinance as yf\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\n\n# Fetch more historical data and additional features\n#(from Google Colab)\n#stock_data = yf.download('GOOGL', start='2000-01-01', end='2025-02-28')\nfrom yahooquery import Ticker\n\nticker = Ticker(\"GOOGL\")\nstock_data = ticker.history(start='2000-01-01', end='2025-02-28')[['close', 'high', 'low', 'open', 'volume' ]].rename(columns={\"close\":\"Close\",\"high\":\"High\",\"low\":\"Low\",\"open\":\"Open\",\"volume\":\"Volume\"})\n#stock_data = pd.read_csv('/kaggle/input/google-stock-from-2000-01-01-to-2025-02-28/google_stock_2000-01-01_2025-02-28_dataset.csv')\nstock_data['Return'] = stock_data['Close'].pct_change()\nstock_data['MA50'] = stock_data['Close'].rolling(window=50).mean()\nstock_data['MA200'] = stock_data['Close'].rolling(window=200).mean()\nstock_data['Volume_MA'] = stock_data['Volume'].rolling(window=20).mean()\nstock_data = stock_data.dropna()\nstock_data.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-14T14:26:44.377344Z","iopub.execute_input":"2025-03-14T14:26:44.377688Z","iopub.status.idle":"2025-03-14T14:26:45.153802Z","shell.execute_reply.started":"2025-03-14T14:26:44.377646Z","shell.execute_reply":"2025-03-14T14:26:45.152865Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"stock_data.tail()","metadata":{"id":"-7tADc1cC0ud","executionInfo":{"status":"ok","timestamp":1741861804920,"user_tz":-60,"elapsed":92,"user":{"displayName":"Mihary Ramanana-rahary","userId":"00864743660161252694"}},"outputId":"06591db1-0e83-422e-8fc4-e7afaf37578e","trusted":true,"execution":{"iopub.status.busy":"2025-03-14T14:26:49.317811Z","iopub.execute_input":"2025-03-14T14:26:49.318149Z","iopub.status.idle":"2025-03-14T14:26:49.331115Z","shell.execute_reply.started":"2025-03-14T14:26:49.318121Z","shell.execute_reply":"2025-03-14T14:26:49.330209Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Normalize the data\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaled_data = scaler.fit_transform(stock_data[['Close', 'Volume', 'Return', 'MA50', 'MA200', 'Volume_MA']])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-14T14:26:52.655357Z","iopub.execute_input":"2025-03-14T14:26:52.655671Z","iopub.status.idle":"2025-03-14T14:26:52.664471Z","shell.execute_reply.started":"2025-03-14T14:26:52.655623Z","shell.execute_reply":"2025-03-14T14:26:52.663819Z"},"id":"oPDCRWN2CHQb","executionInfo":{"status":"ok","timestamp":1741861804932,"user_tz":-60,"elapsed":9,"user":{"displayName":"Mihary Ramanana-rahary","userId":"00864743660161252694"}}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"The closing price is the last price at which a stock or financial asset is traded at the end of a market session.\n\n**Feature engineering Explanation**\n\n- **Returns** : Percentage change in the closing price from one day to the next\n\n$$ \\text{Returns} = \\left( \\frac{\\text{Close}_t - \\text{Close}_{t-1}}{\\text{Close}_{t-1}} \\right) \\times 100 $$\n\n- **MA50 (50-day Moving Average)** : a moving average smooths out short-term fluctuations and highlights longer-term trends. It's the average of the 50 last closing prices\n\n$$\nMA50 = \\frac{1}{50} \\sum_{i=0}^{49} \\text{Close}_{t-i}\n$$\n\n- **MA200** : similar to MA50 but over the last 200 days. Indicator for long-term trends. It helps identify strong support/resistance levels and overall market trends\n\n$$\nMA200 = \\frac{1}{200} \\sum_{i=0}^{199} \\text{Close}_{t-i}\n$$\n\n- **Volume_MA (20-day Moving Average of Trading Volume)** : It tracks the average trading volume over the past 20 days. It's useful for detecting unusual trading activity and potential trend reversals.\n\n$$\nVolume MA = \\frac{1}{20} \\sum_{i=0}^{19} \\text{Volume}_{t-i}\n$$","metadata":{"id":"VfwVcvIRDw6l"}},{"cell_type":"code","source":"# Create sequences\ndef create_sequences(data, seq_length):\n    X, y = [], []\n    for i in range(len(data) - seq_length):\n        X.append(data[i:(i + seq_length), :])\n        y.append(data[i + seq_length, 0])\n    return np.array(X), np.array(y)\n\nsequence_length = 60\nX, y = create_sequences(scaled_data, sequence_length)\n\n# Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","metadata":{"id":"npu9MKdqIMbk","executionInfo":{"status":"ok","timestamp":1741864032506,"user_tz":-60,"elapsed":28,"user":{"displayName":"Mihary Ramanana-rahary","userId":"00864743660161252694"}},"trusted":true,"execution":{"iopub.status.busy":"2025-03-14T14:26:55.916494Z","iopub.execute_input":"2025-03-14T14:26:55.916934Z","iopub.status.idle":"2025-03-14T14:26:55.948385Z","shell.execute_reply.started":"2025-03-14T14:26:55.916895Z","shell.execute_reply":"2025-03-14T14:26:55.947381Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Building LSTM Model","metadata":{"id":"1wcMw0jsR_wy"}},{"cell_type":"markdown","source":"We incorporate multiple layers and implement dropout techniques for effective regularization.\n\nBy adding depth to our network, we want to improve the model's ability to generalize and so marke more accurate predictions on unseen stock price patterns.","metadata":{"id":"WzWTu5yKSGpP"}},{"cell_type":"code","source":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM, Dense, Dropout, BatchNormalization\nfrom tensorflow.keras.optimizers import Adam\n\ndef build_improved_lstm_model(input_shape):\n    model = Sequential([\n        LSTM(100, return_sequences=True, input_shape=input_shape),\n        BatchNormalization(),\n        Dropout(0.2),\n        LSTM(100, return_sequences=True),\n        BatchNormalization(),\n        Dropout(0.2),\n        LSTM(100),\n        BatchNormalization(),\n        Dropout(0.2),\n        Dense(50, activation ='relu'),\n        Dense(1)\n    ])\n    model.compile(optimizer=Adam(learning_rate=0.001), loss='mean_squared_error')\n    return model\n\nmodel = build_improved_lstm_model((X_train.shape[1], X_train.shape[2]))\nmodel.summary()","metadata":{"id":"MAmoexNtS3Cv","executionInfo":{"status":"ok","timestamp":1741866213206,"user_tz":-60,"elapsed":2788,"user":{"displayName":"Mihary Ramanana-rahary","userId":"00864743660161252694"}},"outputId":"2619ed3a-fd96-4434-f98e-c411e7155a11","trusted":true,"execution":{"iopub.status.busy":"2025-03-14T14:27:00.144494Z","iopub.execute_input":"2025-03-14T14:27:00.144844Z","iopub.status.idle":"2025-03-14T14:27:13.35812Z","shell.execute_reply.started":"2025-03-14T14:27:00.144815Z","shell.execute_reply":"2025-03-14T14:27:13.357247Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Training : Early Stopping and Learning Rate Scheduling","metadata":{"id":"NLT9BQDhUhem"}},{"cell_type":"markdown","source":"- **Early stopping** : prevent overfitting\n- **Learning rate scheduling** : adjusts the learning rate during training. In the early stages of training, the model will make larger updates, and finer adjustments as it converges.","metadata":{"id":"4Ij80qKzUsut"}},{"cell_type":"code","source":"from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\n\nearly_stopping = EarlyStopping(monitor='val_loss', patience=20, restore_best_weights=True)\nlr_scheduler = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=10, min_lr=0.00001)\n\nhistory = model.fit(\n    X_train, y_train,\n    epochs=200,\n    batch_size=32,\n    validation_split=0.2,\n    callbacks=[early_stopping, lr_scheduler],\n    verbose=1\n)","metadata":{"id":"ByCEttwFVInY","executionInfo":{"status":"ok","timestamp":1741866900758,"user_tz":-60,"elapsed":259088,"user":{"displayName":"Mihary Ramanana-rahary","userId":"00864743660161252694"}},"outputId":"f2e23988-92e0-4308-ebf6-e29ac6a63bf4","trusted":true,"execution":{"iopub.status.busy":"2025-03-14T14:27:21.231386Z","iopub.execute_input":"2025-03-14T14:27:21.232013Z","iopub.status.idle":"2025-03-14T14:29:28.517451Z","shell.execute_reply.started":"2025-03-14T14:27:21.231981Z","shell.execute_reply":"2025-03-14T14:29:28.516654Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Model Evaluation and Visualization","metadata":{"id":"o9XtqoXoXZjF"}},{"cell_type":"markdown","source":"To evaluate our model, we calculate the Mean Squared Error (MSE), Mean Absolute Error (MAE) and the R-squared (R2) score.\n\nThen, we plot the predicted values agint actual stock prices.\n\nWe analyze the residual to identify any patterns in prediction errors.\n\nWe roll a window to assess model performance over different time periods","metadata":{"id":"0H9lvsqxZH-U"}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Make predictions\ntrain_predictions = model.predict(X_train)\ntest_predictions = model.predict(X_test)\n\n# Inverse transform predictions\ntrain_predictions = scaler.inverse_transform(np.concatenate((train_predictions, np.zeros((len(train_predictions), 5))), axis=1))[:, 0]\ntest_predictions = scaler.inverse_transform(np.concatenate((test_predictions, np.zeros((len(test_predictions), 5))), axis=1))[:, 0]\ny_train_actual = scaler.inverse_transform(np.concatenate((y_train.reshape(-1, 1), np.zeros((len(y_train), 5))), axis=1))[:, 0]\ny_test_actual = scaler.inverse_transform(np.concatenate((y_test.reshape(-1, 1), np.zeros((len(y_test), 5))), axis=1))[:, 0]\n\n# Visualize predictions\nplt.figure(figsize=(15, 6))\nplt.plot(y_test_actual, label='Actual')\nplt.plot(test_predictions, label = 'Predicted')\nplt.title('LSTM Model : Actual vs Predicted Stock Prices')\nplt.xlabel('Time')\nplt.ylabel('Stock Price')\nplt.legend()\nplt.show()","metadata":{"id":"tIZ_y8QmZ3Yd","executionInfo":{"status":"ok","timestamp":1741868867057,"user_tz":-60,"elapsed":2202,"user":{"displayName":"Mihary Ramanana-rahary","userId":"00864743660161252694"}},"outputId":"1d7b8536-d409-4868-8d92-d5d2afc69020","trusted":true,"execution":{"iopub.status.busy":"2025-03-14T14:34:26.620174Z","iopub.execute_input":"2025-03-14T14:34:26.620466Z","iopub.status.idle":"2025-03-14T14:34:28.396748Z","shell.execute_reply.started":"2025-03-14T14:34:26.620441Z","shell.execute_reply":"2025-03-14T14:34:28.395753Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Evaluate model performance\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n\nmse = mean_squared_error(y_test_actual, test_predictions)\nmae = mean_absolute_error(y_test_actual, test_predictions)\nr2 = r2_score(y_test_actual, test_predictions)\n\nprint(f'Mean Squared Error: {mse}')\nprint(f'Mean Absolute Error: {mae}')\nprint(f'R-squared Score: {r2}')","metadata":{"id":"UWe8ov0hdt_y","executionInfo":{"status":"ok","timestamp":1741868886913,"user_tz":-60,"elapsed":8,"user":{"displayName":"Mihary Ramanana-rahary","userId":"00864743660161252694"}},"outputId":"12a849d0-f303-4287-dcb8-7b2faeb8deaa","trusted":true,"execution":{"iopub.status.busy":"2025-03-14T14:34:34.91584Z","iopub.execute_input":"2025-03-14T14:34:34.916165Z","iopub.status.idle":"2025-03-14T14:34:34.923544Z","shell.execute_reply.started":"2025-03-14T14:34:34.916136Z","shell.execute_reply":"2025-03-14T14:34:34.922829Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Our model perform well, with an almost perfect R2 Score.","metadata":{"id":"Kk2EkJkzgITC"}},{"cell_type":"code","source":"#model.save(\"lstm_google_stock.h5\")","metadata":{"id":"uNGlvmerxPYq","executionInfo":{"status":"ok","timestamp":1741873996053,"user_tz":-60,"elapsed":65,"user":{"displayName":"Mihary Ramanana-rahary","userId":"00864743660161252694"}},"outputId":"b7c1ef83-da7a-4a97-ba00-474d75554a40"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Ensemble Method","metadata":{"id":"9zzgs9LFrCnc"}},{"cell_type":"code","source":"def create_ensemble(n_models, input_shape):\n    models = []\n    for _ in range(n_models):\n        model = build_improved_lstm_model(input_shape)\n        models.append(model)\n    return models\n\nn_models = 3\nensemble = create_ensemble(n_models, (X_train.shape[1], X_train.shape[2]))\n\n# Train each model in the ensemble\nfor i, model in enumerate(ensemble):\n    print(f\"Training model {i+1}/{n_models}\")\n    model.fit(X_train, y_train, epochs=100, batch_size=32, validation_split=0.2,\n              callbacks=[early_stopping, lr_scheduler], verbose=0)\n\n# Make ensemble predictions\nensemble_predictions = np.mean([model.predict(X_test) for model in ensemble], axis=0)\n\n# Inverse transform ensemble predictions\nensemble_predictions = scaler.inverse_transform(np.concatenate((ensemble_predictions, np.zeros((len(ensemble_predictions), 5))), axis=1))[:, 0]\n\n# Evaluate ensemble performance\nensemble_mse = mean_squared_error(y_test_actual, ensemble_predictions)\nensemble_mae = mean_absolute_error(y_test_actual, ensemble_predictions)\nensemble_r2 = r2_score(y_test_actual, ensemble_predictions)\n\nprint(f'Ensemble Mean Squared Error: {ensemble_mse}')\nprint(f'Ensemble Mean Absolute Error: {ensemble_mae}')\nprint(f'Ensemble R-squared Score: {ensemble_r2}')","metadata":{"id":"qFsDW9jvrE68","executionInfo":{"status":"ok","timestamp":1741872789658,"user_tz":-60,"elapsed":597283,"user":{"displayName":"Mihary Ramanana-rahary","userId":"00864743660161252694"}},"outputId":"edd61c9c-7e08-4a29-d22b-91230de6bb47","trusted":true,"execution":{"iopub.status.busy":"2025-03-14T14:34:45.926077Z","iopub.execute_input":"2025-03-14T14:34:45.926364Z","iopub.status.idle":"2025-03-14T14:36:37.141295Z","shell.execute_reply.started":"2025-03-14T14:34:45.92634Z","shell.execute_reply":"2025-03-14T14:36:37.140491Z"}},"outputs":[],"execution_count":null}]}